from collections import deque, defaultdict

class Graph:
    def __init__(self):
        self.adj = defaultdict(list)

    def add_edge(self, u, v, bidirectional=True):
        self.adj[u].append(v)
        if bidirectional:
            self.adj[v].append(u)

    def bfs(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)

        order = []
        while queue:
            node = queue.popleft()
            order.append(node)
            for neighbor in self.adj[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
        return order

    def bfs_with_distance(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)
        distance = {start: 0}

        while queue:
            node = queue.popleft()
            for neighbor in self.adj[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)
                    distance[neighbor] = distance[node] + 1
        return distance

    def bfs_path(self, start, target):
        visited = set()
        queue = deque([start])
        visited.add(start)
        parent = {start: None}

        while queue:
            node = queue.popleft()
            if node == target:
                break
            for neighbor in self.adj[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    parent[neighbor] = node
                    queue.append(neighbor)

        # Reconstruct path
        if target not in parent:
            return None  # no path
        path = []
        while target is not None:
            path.append(target)
            target = parent[target]
        path.reverse()
        return path

# Grid BFS (e.g., for maze solving)
def bfs_grid(grid, start, target):
    rows, cols = len(grid), len(grid[0])
    visited = [[False for _ in range(cols)] for _ in range(rows)]
    queue = deque()
    parent = {}
    sr, sc = start
    tr, tc = target
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    queue.append((sr, sc))
    visited[sr][sc] = True
    parent[(sr, sc)] = None

    while queue:
        r, c = queue.popleft()
        if (r, c) == (tr, tc):
            break
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and grid[nr][nc] == 0:
                visited[nr][nc] = True
                parent[(nr, nc)] = (r, c)
                queue.append((nr, nc))

    # Reconstruct path
    if (tr, tc) not in parent:
        return None  # No path
    path = []
    current = (tr, tc)
    while current is not None:
        path.append(current)
        current = parent[current]
    path.reverse()
    return path


# Example usage
if __name__ == "__main__":
    # Graph BFS
    g = Graph()
    edges = [
        ('A', 'B'), ('A', 'C'), ('B', 'D'),
        ('C', 'E'), ('D', 'F'), ('E', 'F')
    ]
    for u, v in edges:
        g.add_edge(u, v)

    print("BFS Traversal:", g.bfs('A'))
    print("BFS Distances from A:", g.bfs_with_distance('A'))
    print("BFS Path from A to F:", g.bfs_path('A', 'F'))

    # Grid BFS
    grid = [
        [0, 1, 0, 0],
        [0, 0, 0, 1],
        [1, 1, 0, 0],
        [0, 0, 0, 0]
    ]
    start = (0, 0)
    target = (3, 3)
    path = bfs_grid(grid, start, target)
    print("Grid BFS Path:", path)
