from collections import defaultdict, deque

class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)  # adjacency list
        self.V = vertices
        self.time = 0  # for timestamps

    def add_edge(self, u, v):
        self.graph[u].append(v)

    # Recursive DFS
    def dfs_recursive(self, v, visited=None):
        if visited is None:
            visited = set()
        visited.add(v)
        print(f"Visited (recursive): {v}")
        for neighbor in self.graph[v]:
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)

    # Iterative DFS
    def dfs_iterative(self, start):
        visited = set()
        stack = [start]
        while stack:
            vertex = stack.pop()
            if vertex not in visited:
                print(f"Visited (iterative): {vertex}")
                visited.add(vertex)
                # Add neighbors in reverse to simulate recursion order
                stack.extend(reversed(self.graph[vertex]))

    # DFS with preorder and postorder tracking
    def dfs_full(self):
        visited = set()
        preorder = []
        postorder = []
        entry = {}
        exit = {}

        def dfs(v):
            visited.add(v)
            self.time += 1
            entry[v] = self.time
            preorder.append(v)
            for neighbor in self.graph[v]:
                if neighbor not in visited:
                    dfs(neighbor)
            self.time += 1
            exit[v] = self.time
            postorder.append(v)

        for vertex in range(self.V):
            if vertex not in visited:
                dfs(vertex)

        print("Preorder:", preorder)
        print("Postorder:", postorder)
        print("Entry times:", entry)
        print("Exit times:", exit)

    # DFS for cycle detection in directed graph
    def has_cycle(self):
        visited = set()
        rec_stack = set()

        def dfs(v):
            visited.add(v)
            rec_stack.add(v)
            for neighbor in self.graph[v]:
                if neighbor not in visited:
                    if dfs(neighbor):
                        return True
                elif neighbor in rec_stack:
                    return True
            rec_stack.remove(v)
            return False

        for node in range(self.V):
            if node not in visited:
                if dfs(node):
                    return True
        return False

    # DFS to handle disconnected components
    def dfs_disconnected(self):
        visited = set()
        components = []

        def dfs(v, comp):
            visited.add(v)
            comp.append(v)
            for neighbor in self.graph[v]:
                if neighbor not in visited:
                    dfs(neighbor, comp)

        for vertex in range(self.V):
            if vertex not in visited:
                comp = []
                dfs(vertex, comp)
                components.append(comp)

        print("Connected components:", components)


# ------------------ Example Usage ------------------

if __name__ == "__main__":
    g = Graph(7)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(1, 4)
    g.add_edge(2, 5)
    g.add_edge(5, 6)
    # Uncomment to add a cycle: g.add_edge(6, 0)

    print("Recursive DFS from node 0:")
    g.dfs_recursive(0)

    print("\nIterative DFS from node 0:")
    g.dfs_iterative(0)

    print("\nDFS with preorder/postorder and timestamps:")
    g.dfs_full()

    print("\nCycle detection:")
    print("Graph has cycle:", g.has_cycle())

    print("\nDFS with disconnected components:")
    g.dfs_disconnected()
